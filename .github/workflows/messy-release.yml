name: CaribData Messy Data — Release

on:
  push:
    tags:
      - "md-*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to create (leave blank to auto md-vYYYY.MM.DD)"
        required: false
        default: ""
      title:
        description: "Release title (optional)"
        required: false
        default: ""
      prerelease:
        description: "Mark as pre-release"
        type: boolean
        required: false
        default: false

permissions:
  contents: write

concurrency:
  group: messy-release
  cancel-in-progress: true

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          set -eux
          pip install -r requirements.txt

      - name: Build messy bundle
        env:
          CARIBDATA_HTTP_TIMEOUT: "120"
          CARIBDATA_HTTP_RETRIES: "6"
          CARIBDATA_HTTP_BACKOFF: "0.8"
        run: |
          set -euxo pipefail
          python scripts/fetch_messy.py
          echo "DEBUG: after fetch_messy.py"
          find data/messy -maxdepth 2 -type f -printf "%p\n" || true

      - name: Ensure bundle exists (auto-create if missing)
        run: |
          set -euxo pipefail
          if [ ! -f "data/messy/belize-messy-bundle.zip" ]; then
            echo "Bundle missing; creating from current messy outputs"
            cd data/messy
            zip -r belize-messy-bundle.zip _manifest.json _report.json _dataset_card.md raw || true
            cd - >/dev/null
          fi
          [ -f "data/messy/belize-messy-bundle.zip" ]
          ls -lh data/messy/belize-messy-bundle.zip

      - name: Compute tag/title/prerelease
        id: meta
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG="${{ inputs.tag }}"; [ -z "$TAG" ] && TAG="md-v$(date -u +%Y.%m.%d)"
            TITLE="${{ inputs.title }}"; [ -z "$TITLE" ] && TITLE="CaribData Messy Data (Belize) — $(date -u +%F)"
            PRERELEASE="${{ inputs.prerelease && 'true' || 'false' }}"
          else
            REF="${GITHUB_REF#refs/tags/}"; TAG="$REF"
            DATE_FROM_TAG=$(echo "$REF" | sed -nE 's/md-v([0-9]{4})[-.]([0-9]{2})[-.]([0-9]{2}).*/\1-\2-\3/p')
            [ -z "$DATE_FROM_TAG" ] && DATE_FROM_TAG="$(date -u +%F)"
            TITLE="CaribData Messy Data (Belize) — $DATE_FROM_TAG"; PRERELEASE="false"
          fi
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "title=$TITLE" >> "$GITHUB_OUTPUT"
          echo "prerelease=$PRERELEASE" >> "$GITHUB_OUTPUT"

      - name: Create annotated tag (manual runs only)
        if: github.event_name == 'workflow_dispatch'
        env:
          TAG: ${{ steps.meta.outputs.tag }}
        run: |
          set -eux
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists; reusing."
          else
            git config user.name "github-actions"
            git config user.email "github-actions@github.com"
            git tag -a "$TAG" -m "Automated messy data release $TAG"
            git push origin "$TAG"
          fi

      # Publish to Pages under /data/messy/<TAG>/ and set messy/latest.json
      - name: Checkout gh-pages
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: ghp
          fetch-depth: 0

      - name: Stage messy files to Pages (and set latest pointer)
        env:
          TAG: ${{ steps.meta.outputs.tag }}
        run: |
          set -euxo pipefail
          mkdir -p "ghp/data/messy/${TAG}"
          rsync -a "data/messy/" "ghp/data/messy/${TAG}/"
          touch ghp/.nojekyll
          ts="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          printf '{\n  "tag": "%s",\n  "published_at": "%s"\n}\n' "$TAG" "$ts" > "ghp/data/messy/${TAG}/_index.json"
          # === NEW: messy latest pointer ===
          printf '{\n  "tag": "%s",\n  "published_at": "%s"\n}\n' "$TAG" "$ts" > "ghp/data/messy/latest.json"

          echo "DEBUG: staged messy counts"
          echo "files: $(find ghp/data/messy/${TAG} -type f | wc -l)"
          cd ghp
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add -A
          git status --porcelain
          git commit -m "Publish Messy Data for ${TAG} to Pages (+ set messy/latest.json)" || echo "No changes to commit"
          git push

      - name: Upload messy snapshot (debug)
        uses: actions/upload-artifact@v4
        with:
          name: messy-snapshot-${{ steps.meta.outputs.tag }}
          path: |
            data/messy/
            ghp/data/messy/${{ steps.meta.outputs.tag }}/
            ghp/data/messy/latest.json

      - name: Package ZIP + small assets + checksums
        run: |
          set -euxo pipefail
          TAG="${{ steps.meta.outputs.tag }}"
          mkdir -p dist
          DEST="dist/belize-messy-bundle_${TAG}.zip"
          cp data/messy/belize-messy-bundle.zip "$DEST"
          cp data/messy/_manifest.json   dist/messy_manifest.json   || true
          cp data/messy/_report.json     dist/messy_report.json     || true
          cp data/messy/_dataset_card.md dist/messy_dataset_card.md || true
          (cd dist && sha256sum *.zip *.json *.md 2>/dev/null | tee SHA256SUMS.txt || true)
          ls -lh dist

      - name: Create/Update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.meta.outputs.tag }}
          name: ${{ steps.meta.outputs.title }}
          prerelease: ${{ steps.meta.outputs.prerelease }}
          files: |
            dist/belize-messy-bundle_*.zip
            dist/messy_manifest.json
            dist/messy_report.json
            dist/messy_dataset_card.md
            dist/SHA256SUMS.txt
          body: |
            CaribData Messy Data (Belize) — automated bundle.
            Assets:
            - belize-messy-bundle_<tag>.zip (all raw files)
            - Separate files for programmatic linking: manifest, report, dataset card
            - SHA256SUMS.txt
